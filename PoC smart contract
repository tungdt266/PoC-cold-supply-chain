//Provenance Smart Contract Code
// contract to allow supply chain parties and consumers to check the provenance of goods

contract Provenance {
    address admin;
    mapping (address => Producer) producers;
    mapping (string => Product) products;
struct Producer {
    string name;
    uint phoneNo;
    string cityState;
    string country;
    bool certified;
}

struct Product {
    address producer;
    uint[] locationData; // array containing lat & long
    uint timeStamp;
}
// constructor - runs once when contract is deployed
function Provenance() {
    admin = msg.sender;
}
// modifier to allow only admin to execute a function
modifier onlyAdmin() {
    if (msg.sender != admin) throw;
    ;
}

// function for producer to add their details to database
function addProducer(string _name, uint _phoneNo, string _cityState, string _country) returns (bool success) {
// don't overwrite existing entries and ensure name isn't null
    if (bytes(producers[msg.sender].name).length == 0 && bytes(_name).length != 0) {
    producers[msg.sender].name = _name;
    producers[msg.sender].phoneNo = _phoneNo;
    producers[msg.sender].cityState = _cityState;
    producers[msg.sender].country = _country;
    producers[msg.sender].certified = false;

return true;
}
else {
return false; // either entry already exists or name entered was null
  }
}
// function to remove producer from database (can only be done by admin)
function removeProducer(address _producer) onlyAdmin returns (boolsuccess) { delete producers [_producer];
  return true;
}
// function to display details of producer
function findProducer(address _producer) constant returns (string, uint, string, string, bool) {
    return (producers[_producer].name,
    producers[_producer].phoneNo, producers[_producer].cityState,
    producers[_producer].country, producers[_producer].certified);
}
// function to certify producer as legitimate (can only be done by admin)
function certifyProducer(address _producer) onlyAdmin returns (bool success) {
    producers [_producer] .certified = true;
    return true;
}
// function for producer to add their product to database
function addProduct(string serialNo, uint[] _locationData) returns (bool success) {
// ensure no duplicate serial numbers and serial number isn't null
    if (products[serialNo].producer == OxO &&
    bytes(serialNo).length != 0) {
    products [serialNo].producer = msg.sender;
    products[serialNo].locationData = _locationData;
    products[serialNol.timeStamp = block.timestamp;
    return true;
}

else {
  return false; // either serial number already in use or
  serial number entered was null
}
}
// function to remove product from database (can only be done by admin)
function removeProduct(string serialNo) onlyAdmin returns (bool success) {
  delete products [serialNo];
  return true;
}
// function to display details of product
function findProduct(string serialNo) constant returns (address, uint[], uint) {
  return (products[serialNo].producer,
  products [serialNo] .locationData, products[serialNo] .timeStamp);
  }
}

//Tracking Smart Contract Code
// contract to allow supply chain parties to track shipment of goods and automatically execute payment in tokens
contract Tracking {
    address admin;
    uint[] contractLocation; // array containing lat & long
    uint contractLeadTime; // in seconds
    uint contractPayment; // in tokens
    mapping (string => Shipment) shipments;
    mapping (address => uint) balances;
    mapping (address => uint) totalShipped; // total number of shipments made
    mapping (address => uint) successShipped; // number of shipments successfully completed
struct Shipment {
    string item;
    uint quantity;
    uint[] locationData;
    uint timeStamp;
    address sender;
}

// events to display messages when certain transactions are executed
  event Success(string _message, string trackingNo, uint[] _locationData, uint _timeStamp, address _sender);
  event Payment(string _message, address _from, address _to, _amount); event Failure(string _message);
// constructor - runs once when contract is deployed
// determine initial token supply upon contract deployment
function Tracking(uint _initialTokenSupply) {
  admin = msg.sender;
  balances[admin] = _initialTokenSupply; // all tokens held by admin initially
}
// modifier to allow only admin to execute a function
modifier onlyAdmin() {
  if (msg.sender admin) throw;
  _;
}

// function to send tokens from one account to another
function sendToken(address _from, address _to, uint _amount) returns (bool success) {
  if (balances[_from] < _amount) {
    Failure('Insufficient funds to send payment');
    return false;
    }
    balances[_from] -= _amount;
    balances[_to] += _amount;
    Payment('Payment sent', _from, _to, _amount);
    return true;
}
// function to show token balance of an account
function getBalance(address _account) constant returns (uint _balance) {
    return balances[_account];
}
// function to recover tokens from an account (can only be done by admin)
// in the event that the sendToken function gets abused
function recoverToken(address _from, uint _amount) onlyAdmin returns (bool success) {
    if (balances[_from] < _amount) {
    Failure('Insufficient funds for recovery');
    return false;
    }
    balances[_from] -= _amount;
    balances[msg.sender] += _amount;
    Payment('Funds recovered', _from, msg.sender, _amount);
    return true;
}
// function to set contract parameters for next leg of shipment (can only be done by admin)
function setContractParameters(uint[] _location, uint _leadTime, uint _payment) onlyAdmin returns (bool success) {
    contractLocation = _location; // set next location that will receive shipment
    contractLeadTime = _leadTime; // set acceptable lead time for next leg of shipment
    contractPayment = _payment; // set payment amount for completing next leg of shipment
    return true;
}
// function for party to input details of shipment that was sent
    function sendShipment(string trackingNo, string _item, uint _quantity, uint[] _locationData) returns (bool success) {
    shipments[trackingNo].item = _item;
    shipments[trackingNo].quantity = _quantity;
    shipments[trackingNo].locationData = _locationData;
    shipments[trackingNo].timeStamp = block.timestamp;
    shipments[trackingNo].sender = msg.sender;
    totalShipped[msg.sender] += 1;
    Success('Item shipped', trackingNo, _locationData, block.timestamp, msg.sender);
    return true;
}
// function for party to input details of shipment that was received
function receiveShipment(string trackingNo, string _item, uint _quantity, uint[] _locationData) returns (bool success) {
    // check that item and quantity received match item and quantity shipped
      if (sha3(shipments[trackingNo].item) == sha3(_item) && shipments[trackingNo].quantity == _quantity) {
        successShipped[shipments[trackingNo].sender] += 1;
        Success('Item received', trackingNo, _locationData, block.timestamp, msg.sender);
    // execute payment if item received on time and location correct
      if (block.timestamp <= shipments[trackingNo].timeStamp + contractLeadTime && _locationData[0] == contractLocation[0] && _locationData[1] == contractLocation[1]) {
        sendToken(admin, shipments[trackingNo].sender, contractPayment);
}

    else {
      Failure('Payment not triggered as criteria not met');
      }
      return true;
    }
    else {
      Failure('Error in item/quantity');
      return false;
    }
}
// function to remove details of shipment from database (can only be done by admin)
  function deleteShipment(string trackingNo) onlyAdmin returns (bool success) {
      delete shipments[trackingNo];
      return true;
}
// function to display details of shipment
function checkShipment(string trackingNo) constant returns (string, uint, uint[], uint, address) {
    return (shipments[trackingNo].item,
    shipments[trackingNo].quantity, shipments[trackingNo].locationData,
    shipments[trackingNo].timeStamp, shipments[trackingNo].sender);
}
// function to display number of successfully completed shipments and total shipments for a party
function checkSuccess(address _sender) constant returns (uint, uint) {
    return (successShipped[_sender], totalShipped[_sender]);
  }
// function to calculate reputation score of a party (percentage of successfully completed shipments)
function calculateReputation(address _sender) constant returns (uint) {
    if (totalShipped[_sender] 0) {
        return (100 * successShipped[_sender]
    totalShipped[_sender]);
      }
     else {
      return 0;
    }
  }
}
